// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString())
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalInvestments(): BigInt {
    let value = this.get("totalInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestments(value: BigInt) {
    this.set("totalInvestments", Value.fromBigInt(value));
  }

  get totalInvestmentVolume(): BigInt {
    let value = this.get("totalInvestmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestmentVolume(value: BigInt) {
    this.set("totalInvestmentVolume", Value.fromBigInt(value));
  }

  get totalTokensReceived(): BigInt {
    let value = this.get("totalTokensReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensReceived(value: BigInt) {
    this.set("totalTokensReceived", Value.fromBigInt(value));
  }

  get totalTokensClaimed(): BigInt {
    let value = this.get("totalTokensClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensClaimed(value: BigInt) {
    this.set("totalTokensClaimed", Value.fromBigInt(value));
  }

  get totalPayoutsReceived(): BigInt {
    let value = this.get("totalPayoutsReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsReceived(value: BigInt) {
    this.set("totalPayoutsReceived", Value.fromBigInt(value));
  }

  get totalPayoutsClaimed(): BigInt {
    let value = this.get("totalPayoutsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsClaimed(value: BigInt) {
    this.set("totalPayoutsClaimed", Value.fromBigInt(value));
  }

  get activeWrappedTokens(): BigInt {
    let value = this.get("activeWrappedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeWrappedTokens(value: BigInt) {
    this.set("activeWrappedTokens", Value.fromBigInt(value));
  }

  get totalEmergencyUnlocks(): BigInt {
    let value = this.get("totalEmergencyUnlocks");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEmergencyUnlocks(value: BigInt) {
    this.set("totalEmergencyUnlocks", Value.fromBigInt(value));
  }

  get totalPenaltiesPaid(): BigInt {
    let value = this.get("totalPenaltiesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPenaltiesPaid(value: BigInt) {
    this.set("totalPenaltiesPaid", Value.fromBigInt(value));
  }

  get totalOfferingsCreated(): BigInt {
    let value = this.get("totalOfferingsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOfferingsCreated(value: BigInt) {
    this.set("totalOfferingsCreated", Value.fromBigInt(value));
  }

  get totalFundsRaised(): BigInt {
    let value = this.get("totalFundsRaised");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFundsRaised(value: BigInt) {
    this.set("totalFundsRaised", Value.fromBigInt(value));
  }

  get firstActivityAt(): BigInt {
    let value = this.get("firstActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstActivityAt(value: BigInt) {
    this.set("firstActivityAt", Value.fromBigInt(value));
  }

  get lastActivityAt(): BigInt {
    let value = this.get("lastActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityAt(value: BigInt) {
    this.set("lastActivityAt", Value.fromBigInt(value));
  }

  get investments(): UserInvestmentLoader {
    return new UserInvestmentLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "investments"
    );
  }

  get aggregatedInvestments(): UserOfferingInvestmentLoader {
    return new UserOfferingInvestmentLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "aggregatedInvestments"
    );
  }

  get claims(): UserClaimLoader {
    return new UserClaimLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "claims"
    );
  }

  get payouts(): UserPayoutLoader {
    return new UserPayoutLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "payouts"
    );
  }

  get wrappedTokenHoldings(): UserWrappedTokenHoldingLoader {
    return new UserWrappedTokenHoldingLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "wrappedTokenHoldings"
    );
  }

  get createdOfferings(): OfferingLoader {
    return new OfferingLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "createdOfferings"
    );
  }

  get emergencyUnlocks(): UserEmergencyUnlockLoader {
    return new UserEmergencyUnlockLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "emergencyUnlocks"
    );
  }

  get refunds(): UserRefundLoader {
    return new UserRefundLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "refunds"
    );
  }

  get kybValidations(): UserKYBValidationLoader {
    return new UserKYBValidationLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "kybValidations"
    );
  }

  get notifications(): UserNotificationLoader {
    return new UserNotificationLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "notifications"
    );
  }

  get activityHistory(): UserActivityHistoryLoader {
    return new UserActivityHistoryLoader(
      "User",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "activityHistory"
    );
  }
}

export class UserOfferingInvestment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserOfferingInvestment entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserOfferingInvestment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserOfferingInvestment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserOfferingInvestment | null {
    return changetype<UserOfferingInvestment | null>(
      store.get_in_block("UserOfferingInvestment", id.toHexString())
    );
  }

  static load(id: Bytes): UserOfferingInvestment | null {
    return changetype<UserOfferingInvestment | null>(
      store.get("UserOfferingInvestment", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get offering(): Bytes {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes) {
    this.set("offering", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get totalInvestments(): BigInt {
    let value = this.get("totalInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestments(value: BigInt) {
    this.set("totalInvestments", Value.fromBigInt(value));
  }

  get totalPaidAmount(): BigInt {
    let value = this.get("totalPaidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPaidAmount(value: BigInt) {
    this.set("totalPaidAmount", Value.fromBigInt(value));
  }

  get totalUSDValue(): BigInt {
    let value = this.get("totalUSDValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDValue(value: BigInt) {
    this.set("totalUSDValue", Value.fromBigInt(value));
  }

  get totalTokensReceived(): BigInt {
    let value = this.get("totalTokensReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensReceived(value: BigInt) {
    this.set("totalTokensReceived", Value.fromBigInt(value));
  }

  get totalWrappedTokensReceived(): BigInt {
    let value = this.get("totalWrappedTokensReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWrappedTokensReceived(value: BigInt) {
    this.set("totalWrappedTokensReceived", Value.fromBigInt(value));
  }

  get totalETHInvested(): BigInt {
    let value = this.get("totalETHInvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalETHInvested(value: BigInt) {
    this.set("totalETHInvested", Value.fromBigInt(value));
  }

  get totalERC20Invested(): BigInt {
    let value = this.get("totalERC20Invested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalERC20Invested(value: BigInt) {
    this.set("totalERC20Invested", Value.fromBigInt(value));
  }

  get totalKYBValidatedInvestments(): BigInt {
    let value = this.get("totalKYBValidatedInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalKYBValidatedInvestments(value: BigInt) {
    this.set("totalKYBValidatedInvestments", Value.fromBigInt(value));
  }

  get hasClaimedTokens(): boolean {
    let value = this.get("hasClaimedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasClaimedTokens(value: boolean) {
    this.set("hasClaimedTokens", Value.fromBoolean(value));
  }

  get totalTokensClaimed(): BigInt {
    let value = this.get("totalTokensClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensClaimed(value: BigInt) {
    this.set("totalTokensClaimed", Value.fromBigInt(value));
  }

  get hasReceivedRefund(): boolean {
    let value = this.get("hasReceivedRefund");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasReceivedRefund(value: boolean) {
    this.set("hasReceivedRefund", Value.fromBoolean(value));
  }

  get totalRefundReceived(): BigInt {
    let value = this.get("totalRefundReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRefundReceived(value: BigInt) {
    this.set("totalRefundReceived", Value.fromBigInt(value));
  }

  get firstInvestmentAt(): BigInt {
    let value = this.get("firstInvestmentAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInvestmentAt(value: BigInt) {
    this.set("firstInvestmentAt", Value.fromBigInt(value));
  }

  get lastInvestmentAt(): BigInt {
    let value = this.get("lastInvestmentAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastInvestmentAt(value: BigInt) {
    this.set("lastInvestmentAt", Value.fromBigInt(value));
  }

  get individualInvestments(): UserInvestmentLoader {
    return new UserInvestmentLoader(
      "UserOfferingInvestment",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "individualInvestments"
    );
  }
}

export class UserInvestment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserInvestment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserInvestment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserInvestment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserInvestment | null {
    return changetype<UserInvestment | null>(
      store.get_in_block("UserInvestment", id.toHexString())
    );
  }

  static load(id: Bytes): UserInvestment | null {
    return changetype<UserInvestment | null>(
      store.get("UserInvestment", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get offering(): Bytes {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes) {
    this.set("offering", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get paymentTokenSymbol(): string {
    let value = this.get("paymentTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set paymentTokenSymbol(value: string) {
    this.set("paymentTokenSymbol", Value.fromString(value));
  }

  get paidAmount(): BigInt {
    let value = this.get("paidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paidAmount(value: BigInt) {
    this.set("paidAmount", Value.fromBigInt(value));
  }

  get usdValue(): BigInt {
    let value = this.get("usdValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdValue(value: BigInt) {
    this.set("usdValue", Value.fromBigInt(value));
  }

  get tokensReceived(): BigInt {
    let value = this.get("tokensReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensReceived(value: BigInt) {
    this.set("tokensReceived", Value.fromBigInt(value));
  }

  get isKYBValidated(): boolean {
    let value = this.get("isKYBValidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isKYBValidated(value: boolean) {
    this.set("isKYBValidated", Value.fromBoolean(value));
  }

  get isNativeETH(): boolean {
    let value = this.get("isNativeETH");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isNativeETH(value: boolean) {
    this.set("isNativeETH", Value.fromBoolean(value));
  }

  get hasWrappedTokens(): boolean {
    let value = this.get("hasWrappedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasWrappedTokens(value: boolean) {
    this.set("hasWrappedTokens", Value.fromBoolean(value));
  }

  get wrappedTokenAddress(): Bytes | null {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("wrappedTokenAddress");
    } else {
      this.set("wrappedTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get wrappedTokensReceived(): BigInt {
    let value = this.get("wrappedTokensReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set wrappedTokensReceived(value: BigInt) {
    this.set("wrappedTokensReceived", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get aggregatedInvestment(): Bytes {
    let value = this.get("aggregatedInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set aggregatedInvestment(value: Bytes) {
    this.set("aggregatedInvestment", Value.fromBytes(value));
  }
}

export class UserClaim extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserClaim must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserClaim", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserClaim | null {
    return changetype<UserClaim | null>(
      store.get_in_block("UserClaim", id.toHexString())
    );
  }

  static load(id: Bytes): UserClaim | null {
    return changetype<UserClaim | null>(
      store.get("UserClaim", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get offering(): Bytes | null {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes | null) {
    if (!value) {
      this.unset("offering");
    } else {
      this.set("offering", Value.fromBytes(<Bytes>value));
    }
  }

  get offeringAddress(): Bytes | null {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes | null) {
    if (!value) {
      this.unset("offeringAddress");
    } else {
      this.set("offeringAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get claimType(): string {
    let value = this.get("claimType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set claimType(value: string) {
    this.set("claimType", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get isEmergencyUnlock(): boolean {
    let value = this.get("isEmergencyUnlock");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEmergencyUnlock(value: boolean) {
    this.set("isEmergencyUnlock", Value.fromBoolean(value));
  }

  get penaltyAmount(): BigInt {
    let value = this.get("penaltyAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set penaltyAmount(value: BigInt) {
    this.set("penaltyAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UserPayout extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserPayout entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserPayout must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserPayout", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserPayout | null {
    return changetype<UserPayout | null>(
      store.get_in_block("UserPayout", id.toHexString())
    );
  }

  static load(id: Bytes): UserPayout | null {
    return changetype<UserPayout | null>(
      store.get("UserPayout", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get wrappedToken(): Bytes {
    let value = this.get("wrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedToken(value: Bytes) {
    this.set("wrappedToken", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get payoutToken(): Bytes {
    let value = this.get("payoutToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payoutToken(value: Bytes) {
    this.set("payoutToken", Value.fromBytes(value));
  }

  get payoutTokenSymbol(): string {
    let value = this.get("payoutTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set payoutTokenSymbol(value: string) {
    this.set("payoutTokenSymbol", Value.fromString(value));
  }

  get payoutPeriodNumber(): BigInt {
    let value = this.get("payoutPeriodNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutPeriodNumber(value: BigInt) {
    this.set("payoutPeriodNumber", Value.fromBigInt(value));
  }

  get userWrappedBalance(): BigInt {
    let value = this.get("userWrappedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set userWrappedBalance(value: BigInt) {
    this.set("userWrappedBalance", Value.fromBigInt(value));
  }

  get totalWrappedSupply(): BigInt {
    let value = this.get("totalWrappedSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWrappedSupply(value: BigInt) {
    this.set("totalWrappedSupply", Value.fromBigInt(value));
  }

  get sharePercentage(): BigInt {
    let value = this.get("sharePercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePercentage(value: BigInt) {
    this.set("sharePercentage", Value.fromBigInt(value));
  }

  get isPartialClaim(): boolean {
    let value = this.get("isPartialClaim");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPartialClaim(value: boolean) {
    this.set("isPartialClaim", Value.fromBoolean(value));
  }

  get remainingClaimable(): BigInt {
    let value = this.get("remainingClaimable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingClaimable(value: BigInt) {
    this.set("remainingClaimable", Value.fromBigInt(value));
  }

  get payoutDistribution(): Bytes | null {
    let value = this.get("payoutDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set payoutDistribution(value: Bytes | null) {
    if (!value) {
      this.unset("payoutDistribution");
    } else {
      this.set("payoutDistribution", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UserWrappedTokenHolding extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserWrappedTokenHolding entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserWrappedTokenHolding must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserWrappedTokenHolding", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserWrappedTokenHolding | null {
    return changetype<UserWrappedTokenHolding | null>(
      store.get_in_block("UserWrappedTokenHolding", id.toHexString())
    );
  }

  static load(id: Bytes): UserWrappedTokenHolding | null {
    return changetype<UserWrappedTokenHolding | null>(
      store.get("UserWrappedTokenHolding", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get wrappedToken(): Bytes {
    let value = this.get("wrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedToken(value: Bytes) {
    this.set("wrappedToken", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get currentBalance(): BigInt {
    let value = this.get("currentBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentBalance(value: BigInt) {
    this.set("currentBalance", Value.fromBigInt(value));
  }

  get originalInvestment(): BigInt {
    let value = this.get("originalInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set originalInvestment(value: BigInt) {
    this.set("originalInvestment", Value.fromBigInt(value));
  }

  get usdValueInvested(): BigInt {
    let value = this.get("usdValueInvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdValueInvested(value: BigInt) {
    this.set("usdValueInvested", Value.fromBigInt(value));
  }

  get totalPayoutsReceived(): BigInt {
    let value = this.get("totalPayoutsReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsReceived(value: BigInt) {
    this.set("totalPayoutsReceived", Value.fromBigInt(value));
  }

  get totalPayoutsClaimed(): BigInt {
    let value = this.get("totalPayoutsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsClaimed(value: BigInt) {
    this.set("totalPayoutsClaimed", Value.fromBigInt(value));
  }

  get currentClaimablePayouts(): BigInt {
    let value = this.get("currentClaimablePayouts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentClaimablePayouts(value: BigInt) {
    this.set("currentClaimablePayouts", Value.fromBigInt(value));
  }

  get lastClaimedPeriod(): BigInt {
    let value = this.get("lastClaimedPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimedPeriod(value: BigInt) {
    this.set("lastClaimedPeriod", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get hasClaimedFinal(): boolean {
    let value = this.get("hasClaimedFinal");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasClaimedFinal(value: boolean) {
    this.set("hasClaimedFinal", Value.fromBoolean(value));
  }

  get hasEmergencyUnlocked(): boolean {
    let value = this.get("hasEmergencyUnlocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasEmergencyUnlocked(value: boolean) {
    this.set("hasEmergencyUnlocked", Value.fromBoolean(value));
  }

  get firstInvestmentAt(): BigInt {
    let value = this.get("firstInvestmentAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInvestmentAt(value: BigInt) {
    this.set("firstInvestmentAt", Value.fromBigInt(value));
  }

  get lastActivityAt(): BigInt {
    let value = this.get("lastActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityAt(value: BigInt) {
    this.set("lastActivityAt", Value.fromBigInt(value));
  }
}

export class UserEmergencyUnlock extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserEmergencyUnlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserEmergencyUnlock must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserEmergencyUnlock", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserEmergencyUnlock | null {
    return changetype<UserEmergencyUnlock | null>(
      store.get_in_block("UserEmergencyUnlock", id.toHexString())
    );
  }

  static load(id: Bytes): UserEmergencyUnlock | null {
    return changetype<UserEmergencyUnlock | null>(
      store.get("UserEmergencyUnlock", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get wrappedToken(): Bytes {
    let value = this.get("wrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedToken(value: Bytes) {
    this.set("wrappedToken", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get originalAmount(): BigInt {
    let value = this.get("originalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set originalAmount(value: BigInt) {
    this.set("originalAmount", Value.fromBigInt(value));
  }

  get penaltyAmount(): BigInt {
    let value = this.get("penaltyAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set penaltyAmount(value: BigInt) {
    this.set("penaltyAmount", Value.fromBigInt(value));
  }

  get receivedAmount(): BigInt {
    let value = this.get("receivedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set receivedAmount(value: BigInt) {
    this.set("receivedAmount", Value.fromBigInt(value));
  }

  get penaltyPercentage(): BigInt {
    let value = this.get("penaltyPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set penaltyPercentage(value: BigInt) {
    this.set("penaltyPercentage", Value.fromBigInt(value));
  }

  get totalPayoutsClaimedBefore(): BigInt {
    let value = this.get("totalPayoutsClaimedBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsClaimedBefore(value: BigInt) {
    this.set("totalPayoutsClaimedBefore", Value.fromBigInt(value));
  }

  get unlockedAt(): BigInt {
    let value = this.get("unlockedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unlockedAt(value: BigInt) {
    this.set("unlockedAt", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UserRefund extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserRefund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserRefund must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserRefund", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserRefund | null {
    return changetype<UserRefund | null>(
      store.get_in_block("UserRefund", id.toHexString())
    );
  }

  static load(id: Bytes): UserRefund | null {
    return changetype<UserRefund | null>(
      store.get("UserRefund", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get offering(): Bytes {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes) {
    this.set("offering", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UserKYBValidation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserKYBValidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserKYBValidation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserKYBValidation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserKYBValidation | null {
    return changetype<UserKYBValidation | null>(
      store.get_in_block("UserKYBValidation", id.toHexString())
    );
  }

  static load(id: Bytes): UserKYBValidation | null {
    return changetype<UserKYBValidation | null>(
      store.get("UserKYBValidation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get signatureHash(): Bytes {
    let value = this.get("signatureHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set signatureHash(value: Bytes) {
    this.set("signatureHash", Value.fromBytes(value));
  }

  get validatedAt(): BigInt {
    let value = this.get("validatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set validatedAt(value: BigInt) {
    this.set("validatedAt", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Offering extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offering entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Offering must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offering", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Offering | null {
    return changetype<Offering | null>(
      store.get_in_block("Offering", id.toHexString())
    );
  }

  static load(id: Bytes): Offering | null {
    return changetype<Offering | null>(store.get("Offering", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get tokenOwner(): Bytes {
    let value = this.get("tokenOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOwner(value: Bytes) {
    this.set("tokenOwner", Value.fromBytes(value));
  }

  get saleToken(): Bytes {
    let value = this.get("saleToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set saleToken(value: Bytes) {
    this.set("saleToken", Value.fromBytes(value));
  }

  get saleTokenSymbol(): string {
    let value = this.get("saleTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set saleTokenSymbol(value: string) {
    this.set("saleTokenSymbol", Value.fromString(value));
  }

  get saleTokenName(): string {
    let value = this.get("saleTokenName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set saleTokenName(value: string) {
    this.set("saleTokenName", Value.fromString(value));
  }

  get minInvestment(): BigInt {
    let value = this.get("minInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minInvestment(value: BigInt) {
    this.set("minInvestment", Value.fromBigInt(value));
  }

  get maxInvestment(): BigInt {
    let value = this.get("maxInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxInvestment(value: BigInt) {
    this.set("maxInvestment", Value.fromBigInt(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get fundraisingCap(): BigInt {
    let value = this.get("fundraisingCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundraisingCap(value: BigInt) {
    this.set("fundraisingCap", Value.fromBigInt(value));
  }

  get softCap(): BigInt {
    let value = this.get("softCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set softCap(value: BigInt) {
    this.set("softCap", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get autoTransfer(): boolean {
    let value = this.get("autoTransfer");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set autoTransfer(value: boolean) {
    this.set("autoTransfer", Value.fromBoolean(value));
  }

  get apyEnabled(): boolean {
    let value = this.get("apyEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set apyEnabled(value: boolean) {
    this.set("apyEnabled", Value.fromBoolean(value));
  }

  get wrappedTokenAddress(): Bytes | null {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("wrappedTokenAddress");
    } else {
      this.set("wrappedTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get payoutTokenAddress(): Bytes | null {
    let value = this.get("payoutTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set payoutTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("payoutTokenAddress");
    } else {
      this.set("payoutTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get payoutRate(): BigInt {
    let value = this.get("payoutRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutRate(value: BigInt) {
    this.set("payoutRate", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isFinalized(): boolean {
    let value = this.get("isFinalized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFinalized(value: boolean) {
    this.set("isFinalized", Value.fromBoolean(value));
  }

  get isCancelled(): boolean {
    let value = this.get("isCancelled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCancelled(value: boolean) {
    this.set("isCancelled", Value.fromBoolean(value));
  }

  get softCapReached(): boolean {
    let value = this.get("softCapReached");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set softCapReached(value: boolean) {
    this.set("softCapReached", Value.fromBoolean(value));
  }

  get totalRaised(): BigInt {
    let value = this.get("totalRaised");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRaised(value: BigInt) {
    this.set("totalRaised", Value.fromBigInt(value));
  }

  get totalInvestors(): BigInt {
    let value = this.get("totalInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestors(value: BigInt) {
    this.set("totalInvestors", Value.fromBigInt(value));
  }

  get totalTokensDistributed(): BigInt {
    let value = this.get("totalTokensDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensDistributed(value: BigInt) {
    this.set("totalTokensDistributed", Value.fromBigInt(value));
  }

  get totalRefunded(): BigInt {
    let value = this.get("totalRefunded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRefunded(value: BigInt) {
    this.set("totalRefunded", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get finalizedAt(): BigInt | null {
    let value = this.get("finalizedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finalizedAt(value: BigInt | null) {
    if (!value) {
      this.unset("finalizedAt");
    } else {
      this.set("finalizedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get cancelledAt(): BigInt | null {
    let value = this.get("cancelledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cancelledAt(value: BigInt | null) {
    if (!value) {
      this.unset("cancelledAt");
    } else {
      this.set("cancelledAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class OfferingPerformance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferingPerformance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OfferingPerformance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferingPerformance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OfferingPerformance | null {
    return changetype<OfferingPerformance | null>(
      store.get_in_block("OfferingPerformance", id.toHexString())
    );
  }

  static load(id: Bytes): OfferingPerformance | null {
    return changetype<OfferingPerformance | null>(
      store.get("OfferingPerformance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get offering(): Bytes {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes) {
    this.set("offering", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get totalInvestors(): BigInt {
    let value = this.get("totalInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestors(value: BigInt) {
    this.set("totalInvestors", Value.fromBigInt(value));
  }

  get averageInvestmentSize(): BigInt {
    let value = this.get("averageInvestmentSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averageInvestmentSize(value: BigInt) {
    this.set("averageInvestmentSize", Value.fromBigInt(value));
  }

  get largestInvestment(): BigInt {
    let value = this.get("largestInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set largestInvestment(value: BigInt) {
    this.set("largestInvestment", Value.fromBigInt(value));
  }

  get smallestInvestment(): BigInt {
    let value = this.get("smallestInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set smallestInvestment(value: BigInt) {
    this.set("smallestInvestment", Value.fromBigInt(value));
  }

  get raisedInFirst24Hours(): BigInt {
    let value = this.get("raisedInFirst24Hours");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set raisedInFirst24Hours(value: BigInt) {
    this.set("raisedInFirst24Hours", Value.fromBigInt(value));
  }

  get raisedInFirstWeek(): BigInt {
    let value = this.get("raisedInFirstWeek");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set raisedInFirstWeek(value: BigInt) {
    this.set("raisedInFirstWeek", Value.fromBigInt(value));
  }

  get timeToSoftCap(): BigInt {
    let value = this.get("timeToSoftCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeToSoftCap(value: BigInt) {
    this.set("timeToSoftCap", Value.fromBigInt(value));
  }

  get timeToHardCap(): BigInt {
    let value = this.get("timeToHardCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeToHardCap(value: BigInt) {
    this.set("timeToHardCap", Value.fromBigInt(value));
  }

  get tokensClaimedPercentage(): BigInt {
    let value = this.get("tokensClaimedPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensClaimedPercentage(value: BigInt) {
    this.set("tokensClaimedPercentage", Value.fromBigInt(value));
  }

  get refundedPercentage(): BigInt {
    let value = this.get("refundedPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set refundedPercentage(value: BigInt) {
    this.set("refundedPercentage", Value.fromBigInt(value));
  }

  get totalPayoutsDistributed(): BigInt {
    let value = this.get("totalPayoutsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsDistributed(value: BigInt) {
    this.set("totalPayoutsDistributed", Value.fromBigInt(value));
  }

  get averagePayoutPerUser(): BigInt {
    let value = this.get("averagePayoutPerUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averagePayoutPerUser(value: BigInt) {
    this.set("averagePayoutPerUser", Value.fromBigInt(value));
  }

  get emergencyUnlockRate(): BigInt {
    let value = this.get("emergencyUnlockRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set emergencyUnlockRate(value: BigInt) {
    this.set("emergencyUnlockRate", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class OfferingDeployment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferingDeployment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OfferingDeployment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferingDeployment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OfferingDeployment | null {
    return changetype<OfferingDeployment | null>(
      store.get_in_block("OfferingDeployment", id.toHexString())
    );
  }

  static load(id: Bytes): OfferingDeployment | null {
    return changetype<OfferingDeployment | null>(
      store.get("OfferingDeployment", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get offeringId(): BigInt {
    let value = this.get("offeringId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offeringId(value: BigInt) {
    this.set("offeringId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get tokenOwner(): Bytes {
    let value = this.get("tokenOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOwner(value: Bytes) {
    this.set("tokenOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WrappedToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrappedToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WrappedToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WrappedToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WrappedToken | null {
    return changetype<WrappedToken | null>(
      store.get_in_block("WrappedToken", id.toHexString())
    );
  }

  static load(id: Bytes): WrappedToken | null {
    return changetype<WrappedToken | null>(
      store.get("WrappedToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get offering(): Bytes | null {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set offering(value: Bytes | null) {
    if (!value) {
      this.unset("offering");
    } else {
      this.set("offering", Value.fromBytes(<Bytes>value));
    }
  }

  get offeringAddress(): Bytes {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes) {
    this.set("offeringAddress", Value.fromBytes(value));
  }

  get peggedToken(): Bytes {
    let value = this.get("peggedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set peggedToken(value: Bytes) {
    this.set("peggedToken", Value.fromBytes(value));
  }

  get payoutToken(): Bytes {
    let value = this.get("payoutToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payoutToken(value: Bytes) {
    this.set("payoutToken", Value.fromBytes(value));
  }

  get payoutTokenSymbol(): string {
    let value = this.get("payoutTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set payoutTokenSymbol(value: string) {
    this.set("payoutTokenSymbol", Value.fromString(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get payoutAPR(): BigInt {
    let value = this.get("payoutAPR");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutAPR(value: BigInt) {
    this.set("payoutAPR", Value.fromBigInt(value));
  }

  get payoutPeriodDuration(): BigInt {
    let value = this.get("payoutPeriodDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutPeriodDuration(value: BigInt) {
    this.set("payoutPeriodDuration", Value.fromBigInt(value));
  }

  get firstPayoutDate(): BigInt {
    let value = this.get("firstPayoutDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstPayoutDate(value: BigInt) {
    this.set("firstPayoutDate", Value.fromBigInt(value));
  }

  get currentPayoutPeriod(): BigInt {
    let value = this.get("currentPayoutPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentPayoutPeriod(value: BigInt) {
    this.set("currentPayoutPeriod", Value.fromBigInt(value));
  }

  get lastPayoutDistributionTime(): BigInt {
    let value = this.get("lastPayoutDistributionTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastPayoutDistributionTime(value: BigInt) {
    this.set("lastPayoutDistributionTime", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalEscrowed(): BigInt {
    let value = this.get("totalEscrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEscrowed(value: BigInt) {
    this.set("totalEscrowed", Value.fromBigInt(value));
  }

  get totalUSDTInvested(): BigInt {
    let value = this.get("totalUSDTInvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDTInvested(value: BigInt) {
    this.set("totalUSDTInvested", Value.fromBigInt(value));
  }

  get totalPayoutFundsDistributed(): BigInt {
    let value = this.get("totalPayoutFundsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutFundsDistributed(value: BigInt) {
    this.set("totalPayoutFundsDistributed", Value.fromBigInt(value));
  }

  get totalPayoutsClaimed(): BigInt {
    let value = this.get("totalPayoutsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsClaimed(value: BigInt) {
    this.set("totalPayoutsClaimed", Value.fromBigInt(value));
  }

  get currentPayoutFunds(): BigInt {
    let value = this.get("currentPayoutFunds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentPayoutFunds(value: BigInt) {
    this.set("currentPayoutFunds", Value.fromBigInt(value));
  }

  get emergencyUnlockEnabled(): boolean {
    let value = this.get("emergencyUnlockEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set emergencyUnlockEnabled(value: boolean) {
    this.set("emergencyUnlockEnabled", Value.fromBoolean(value));
  }

  get emergencyUnlockPenalty(): BigInt {
    let value = this.get("emergencyUnlockPenalty");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set emergencyUnlockPenalty(value: BigInt) {
    this.set("emergencyUnlockPenalty", Value.fromBigInt(value));
  }

  get totalEmergencyUnlocks(): BigInt {
    let value = this.get("totalEmergencyUnlocks");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEmergencyUnlocks(value: BigInt) {
    this.set("totalEmergencyUnlocks", Value.fromBigInt(value));
  }

  get totalHolders(): BigInt {
    let value = this.get("totalHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalHolders(value: BigInt) {
    this.set("totalHolders", Value.fromBigInt(value));
  }

  get activeHolders(): BigInt {
    let value = this.get("activeHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeHolders(value: BigInt) {
    this.set("activeHolders", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }
}

export class WrappedTokenDeployment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WrappedTokenDeployment entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WrappedTokenDeployment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WrappedTokenDeployment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): WrappedTokenDeployment | null {
    return changetype<WrappedTokenDeployment | null>(
      store.get_in_block("WrappedTokenDeployment", id.toHexString())
    );
  }

  static load(id: Bytes): WrappedTokenDeployment | null {
    return changetype<WrappedTokenDeployment | null>(
      store.get("WrappedTokenDeployment", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get offeringContract(): Bytes {
    let value = this.get("offeringContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offeringContract(value: Bytes) {
    this.set("offeringContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PayoutDistribution extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayoutDistribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PayoutDistribution must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayoutDistribution", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PayoutDistribution | null {
    return changetype<PayoutDistribution | null>(
      store.get_in_block("PayoutDistribution", id.toHexString())
    );
  }

  static load(id: Bytes): PayoutDistribution | null {
    return changetype<PayoutDistribution | null>(
      store.get("PayoutDistribution", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get wrappedToken(): Bytes {
    let value = this.get("wrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedToken(value: Bytes) {
    this.set("wrappedToken", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get period(): BigInt {
    let value = this.get("period");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set period(value: BigInt) {
    this.set("period", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get totalUSDTAtDistribution(): BigInt {
    let value = this.get("totalUSDTAtDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDTAtDistribution(value: BigInt) {
    this.set("totalUSDTAtDistribution", Value.fromBigInt(value));
  }

  get distributedBy(): Bytes {
    let value = this.get("distributedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set distributedBy(value: Bytes) {
    this.set("distributedBy", Value.fromBytes(value));
  }

  get distributedAt(): BigInt {
    let value = this.get("distributedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set distributedAt(value: BigInt) {
    this.set("distributedAt", Value.fromBigInt(value));
  }

  get eligibleHolders(): BigInt {
    let value = this.get("eligibleHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eligibleHolders(value: BigInt) {
    this.set("eligibleHolders", Value.fromBigInt(value));
  }

  get totalEligibleBalance(): BigInt {
    let value = this.get("totalEligibleBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEligibleBalance(value: BigInt) {
    this.set("totalEligibleBalance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PayoutPeriod extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayoutPeriod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PayoutPeriod must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayoutPeriod", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PayoutPeriod | null {
    return changetype<PayoutPeriod | null>(
      store.get_in_block("PayoutPeriod", id.toHexString())
    );
  }

  static load(id: Bytes): PayoutPeriod | null {
    return changetype<PayoutPeriod | null>(
      store.get("PayoutPeriod", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get wrappedToken(): Bytes {
    let value = this.get("wrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedToken(value: Bytes) {
    this.set("wrappedToken", Value.fromBytes(value));
  }

  get wrappedTokenAddress(): Bytes {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes) {
    this.set("wrappedTokenAddress", Value.fromBytes(value));
  }

  get periodNumber(): BigInt {
    let value = this.get("periodNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set periodNumber(value: BigInt) {
    this.set("periodNumber", Value.fromBigInt(value));
  }

  get distributedAmount(): BigInt {
    let value = this.get("distributedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set distributedAmount(value: BigInt) {
    this.set("distributedAmount", Value.fromBigInt(value));
  }

  get totalUSDTAtDistribution(): BigInt {
    let value = this.get("totalUSDTAtDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDTAtDistribution(value: BigInt) {
    this.set("totalUSDTAtDistribution", Value.fromBigInt(value));
  }

  get distributedAt(): BigInt {
    let value = this.get("distributedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set distributedAt(value: BigInt) {
    this.set("distributedAt", Value.fromBigInt(value));
  }

  get distributedBy(): Bytes {
    let value = this.get("distributedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set distributedBy(value: Bytes) {
    this.set("distributedBy", Value.fromBytes(value));
  }

  get totalClaims(): BigInt {
    let value = this.get("totalClaims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaims(value: BigInt) {
    this.set("totalClaims", Value.fromBigInt(value));
  }

  get totalClaimedAmount(): BigInt {
    let value = this.get("totalClaimedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaimedAmount(value: BigInt) {
    this.set("totalClaimedAmount", Value.fromBigInt(value));
  }

  get unclaimedAmount(): BigInt {
    let value = this.get("unclaimedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unclaimedAmount(value: BigInt) {
    this.set("unclaimedAmount", Value.fromBigInt(value));
  }

  get claimRate(): BigInt {
    let value = this.get("claimRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimRate(value: BigInt) {
    this.set("claimRate", Value.fromBigInt(value));
  }

  get eligibleUsers(): BigInt {
    let value = this.get("eligibleUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eligibleUsers(value: BigInt) {
    this.set("eligibleUsers", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GlobalStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlobalStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id.toHexString())
    );
  }

  static load(id: Bytes): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get("GlobalStats", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get activeInvestors(): BigInt {
    let value = this.get("activeInvestors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeInvestors(value: BigInt) {
    this.set("activeInvestors", Value.fromBigInt(value));
  }

  get totalCreators(): BigInt {
    let value = this.get("totalCreators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCreators(value: BigInt) {
    this.set("totalCreators", Value.fromBigInt(value));
  }

  get totalOfferings(): BigInt {
    let value = this.get("totalOfferings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOfferings(value: BigInt) {
    this.set("totalOfferings", Value.fromBigInt(value));
  }

  get activeOfferings(): BigInt {
    let value = this.get("activeOfferings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeOfferings(value: BigInt) {
    this.set("activeOfferings", Value.fromBigInt(value));
  }

  get totalOfferingVolume(): BigInt {
    let value = this.get("totalOfferingVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOfferingVolume(value: BigInt) {
    this.set("totalOfferingVolume", Value.fromBigInt(value));
  }

  get totalInvestments(): BigInt {
    let value = this.get("totalInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestments(value: BigInt) {
    this.set("totalInvestments", Value.fromBigInt(value));
  }

  get totalInvestmentVolume(): BigInt {
    let value = this.get("totalInvestmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestmentVolume(value: BigInt) {
    this.set("totalInvestmentVolume", Value.fromBigInt(value));
  }

  get totalWrappedTokens(): BigInt {
    let value = this.get("totalWrappedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWrappedTokens(value: BigInt) {
    this.set("totalWrappedTokens", Value.fromBigInt(value));
  }

  get activeWrappedTokens(): BigInt {
    let value = this.get("activeWrappedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeWrappedTokens(value: BigInt) {
    this.set("activeWrappedTokens", Value.fromBigInt(value));
  }

  get totalWrappedTokenHolders(): BigInt {
    let value = this.get("totalWrappedTokenHolders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWrappedTokenHolders(value: BigInt) {
    this.set("totalWrappedTokenHolders", Value.fromBigInt(value));
  }

  get totalPayoutDistributions(): BigInt {
    let value = this.get("totalPayoutDistributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutDistributions(value: BigInt) {
    this.set("totalPayoutDistributions", Value.fromBigInt(value));
  }

  get totalPayoutVolume(): BigInt {
    let value = this.get("totalPayoutVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutVolume(value: BigInt) {
    this.set("totalPayoutVolume", Value.fromBigInt(value));
  }

  get totalPayoutsClaimed(): BigInt {
    let value = this.get("totalPayoutsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsClaimed(value: BigInt) {
    this.set("totalPayoutsClaimed", Value.fromBigInt(value));
  }

  get totalEmergencyUnlocks(): BigInt {
    let value = this.get("totalEmergencyUnlocks");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEmergencyUnlocks(value: BigInt) {
    this.set("totalEmergencyUnlocks", Value.fromBigInt(value));
  }

  get totalPenaltiesPaid(): BigInt {
    let value = this.get("totalPenaltiesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPenaltiesPaid(value: BigInt) {
    this.set("totalPenaltiesPaid", Value.fromBigInt(value));
  }

  get totalRefunds(): BigInt {
    let value = this.get("totalRefunds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRefunds(value: BigInt) {
    this.set("totalRefunds", Value.fromBigInt(value));
  }

  get totalRefundVolume(): BigInt {
    let value = this.get("totalRefundVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRefundVolume(value: BigInt) {
    this.set("totalRefundVolume", Value.fromBigInt(value));
  }

  get totalKYBValidations(): BigInt {
    let value = this.get("totalKYBValidations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalKYBValidations(value: BigInt) {
    this.set("totalKYBValidations", Value.fromBigInt(value));
  }

  get kybValidatedInvestments(): BigInt {
    let value = this.get("kybValidatedInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set kybValidatedInvestments(value: BigInt) {
    this.set("kybValidatedInvestments", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class UserDailyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserDailyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserDailyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserDailyStats | null {
    return changetype<UserDailyStats | null>(
      store.get_in_block("UserDailyStats", id.toHexString())
    );
  }

  static load(id: Bytes): UserDailyStats | null {
    return changetype<UserDailyStats | null>(
      store.get("UserDailyStats", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get investmentsCount(): BigInt {
    let value = this.get("investmentsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investmentsCount(value: BigInt) {
    this.set("investmentsCount", Value.fromBigInt(value));
  }

  get investmentVolume(): BigInt {
    let value = this.get("investmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investmentVolume(value: BigInt) {
    this.set("investmentVolume", Value.fromBigInt(value));
  }

  get claimsCount(): BigInt {
    let value = this.get("claimsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimsCount(value: BigInt) {
    this.set("claimsCount", Value.fromBigInt(value));
  }

  get claimedAmount(): BigInt {
    let value = this.get("claimedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimedAmount(value: BigInt) {
    this.set("claimedAmount", Value.fromBigInt(value));
  }

  get payoutsCount(): BigInt {
    let value = this.get("payoutsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutsCount(value: BigInt) {
    this.set("payoutsCount", Value.fromBigInt(value));
  }

  get payoutAmount(): BigInt {
    let value = this.get("payoutAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutAmount(value: BigInt) {
    this.set("payoutAmount", Value.fromBigInt(value));
  }

  get totalInvestmentVolume(): BigInt {
    let value = this.get("totalInvestmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestmentVolume(value: BigInt) {
    this.set("totalInvestmentVolume", Value.fromBigInt(value));
  }

  get totalTokensHeld(): BigInt {
    let value = this.get("totalTokensHeld");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensHeld(value: BigInt) {
    this.set("totalTokensHeld", Value.fromBigInt(value));
  }

  get totalPayoutsReceived(): BigInt {
    let value = this.get("totalPayoutsReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayoutsReceived(value: BigInt) {
    this.set("totalPayoutsReceived", Value.fromBigInt(value));
  }
}

export class UserMonthlyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserMonthlyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserMonthlyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserMonthlyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserMonthlyStats | null {
    return changetype<UserMonthlyStats | null>(
      store.get_in_block("UserMonthlyStats", id.toHexString())
    );
  }

  static load(id: Bytes): UserMonthlyStats | null {
    return changetype<UserMonthlyStats | null>(
      store.get("UserMonthlyStats", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get yearMonth(): string {
    let value = this.get("yearMonth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set yearMonth(value: string) {
    this.set("yearMonth", Value.fromString(value));
  }

  get investmentsCount(): BigInt {
    let value = this.get("investmentsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investmentsCount(value: BigInt) {
    this.set("investmentsCount", Value.fromBigInt(value));
  }

  get investmentVolume(): BigInt {
    let value = this.get("investmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investmentVolume(value: BigInt) {
    this.set("investmentVolume", Value.fromBigInt(value));
  }

  get claimsCount(): BigInt {
    let value = this.get("claimsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimsCount(value: BigInt) {
    this.set("claimsCount", Value.fromBigInt(value));
  }

  get claimedAmount(): BigInt {
    let value = this.get("claimedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set claimedAmount(value: BigInt) {
    this.set("claimedAmount", Value.fromBigInt(value));
  }

  get payoutsCount(): BigInt {
    let value = this.get("payoutsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutsCount(value: BigInt) {
    this.set("payoutsCount", Value.fromBigInt(value));
  }

  get payoutAmount(): BigInt {
    let value = this.get("payoutAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutAmount(value: BigInt) {
    this.set("payoutAmount", Value.fromBigInt(value));
  }

  get avgInvestmentSize(): BigInt {
    let value = this.get("avgInvestmentSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgInvestmentSize(value: BigInt) {
    this.set("avgInvestmentSize", Value.fromBigInt(value));
  }

  get avgPayoutSize(): BigInt {
    let value = this.get("avgPayoutSize");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgPayoutSize(value: BigInt) {
    this.set("avgPayoutSize", Value.fromBigInt(value));
  }
}

export class DailySystemStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailySystemStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DailySystemStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailySystemStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DailySystemStats | null {
    return changetype<DailySystemStats | null>(
      store.get_in_block("DailySystemStats", id.toHexString())
    );
  }

  static load(id: Bytes): DailySystemStats | null {
    return changetype<DailySystemStats | null>(
      store.get("DailySystemStats", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get newUsers(): BigInt {
    let value = this.get("newUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newUsers(value: BigInt) {
    this.set("newUsers", Value.fromBigInt(value));
  }

  get newOfferings(): BigInt {
    let value = this.get("newOfferings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newOfferings(value: BigInt) {
    this.set("newOfferings", Value.fromBigInt(value));
  }

  get newInvestments(): BigInt {
    let value = this.get("newInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newInvestments(value: BigInt) {
    this.set("newInvestments", Value.fromBigInt(value));
  }

  get investmentVolume(): BigInt {
    let value = this.get("investmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set investmentVolume(value: BigInt) {
    this.set("investmentVolume", Value.fromBigInt(value));
  }

  get payoutDistributions(): BigInt {
    let value = this.get("payoutDistributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutDistributions(value: BigInt) {
    this.set("payoutDistributions", Value.fromBigInt(value));
  }

  get payoutVolume(): BigInt {
    let value = this.get("payoutVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutVolume(value: BigInt) {
    this.set("payoutVolume", Value.fromBigInt(value));
  }

  get payoutClaims(): BigInt {
    let value = this.get("payoutClaims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set payoutClaims(value: BigInt) {
    this.set("payoutClaims", Value.fromBigInt(value));
  }

  get emergencyUnlocks(): BigInt {
    let value = this.get("emergencyUnlocks");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set emergencyUnlocks(value: BigInt) {
    this.set("emergencyUnlocks", Value.fromBigInt(value));
  }

  get emergencyVolume(): BigInt {
    let value = this.get("emergencyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set emergencyVolume(value: BigInt) {
    this.set("emergencyVolume", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalOfferings(): BigInt {
    let value = this.get("totalOfferings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOfferings(value: BigInt) {
    this.set("totalOfferings", Value.fromBigInt(value));
  }

  get totalInvestmentVolume(): BigInt {
    let value = this.get("totalInvestmentVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestmentVolume(value: BigInt) {
    this.set("totalInvestmentVolume", Value.fromBigInt(value));
  }
}

export class UserNotification extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserNotification entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserNotification must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserNotification", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserNotification | null {
    return changetype<UserNotification | null>(
      store.get_in_block("UserNotification", id.toHexString())
    );
  }

  static load(id: Bytes): UserNotification | null {
    return changetype<UserNotification | null>(
      store.get("UserNotification", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get notificationType(): string {
    let value = this.get("notificationType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set notificationType(value: string) {
    this.set("notificationType", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get message(): string {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }

  get priority(): string {
    let value = this.get("priority");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set priority(value: string) {
    this.set("priority", Value.fromString(value));
  }

  get isRead(): boolean {
    let value = this.get("isRead");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isRead(value: boolean) {
    this.set("isRead", Value.fromBoolean(value));
  }

  get isActionable(): boolean {
    let value = this.get("isActionable");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActionable(value: boolean) {
    this.set("isActionable", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get readAt(): BigInt | null {
    let value = this.get("readAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set readAt(value: BigInt | null) {
    if (!value) {
      this.unset("readAt");
    } else {
      this.set("readAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get expiresAt(): BigInt | null {
    let value = this.get("expiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiresAt(value: BigInt | null) {
    if (!value) {
      this.unset("expiresAt");
    } else {
      this.set("expiresAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get relatedOffering(): Bytes | null {
    let value = this.get("relatedOffering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set relatedOffering(value: Bytes | null) {
    if (!value) {
      this.unset("relatedOffering");
    } else {
      this.set("relatedOffering", Value.fromBytes(<Bytes>value));
    }
  }

  get relatedWrappedToken(): Bytes | null {
    let value = this.get("relatedWrappedToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set relatedWrappedToken(value: Bytes | null) {
    if (!value) {
      this.unset("relatedWrappedToken");
    } else {
      this.set("relatedWrappedToken", Value.fromBytes(<Bytes>value));
    }
  }

  get relatedAmount(): BigInt {
    let value = this.get("relatedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set relatedAmount(value: BigInt) {
    this.set("relatedAmount", Value.fromBigInt(value));
  }
}

export class UserActivityHistory extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserActivityHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserActivityHistory must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserActivityHistory", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserActivityHistory | null {
    return changetype<UserActivityHistory | null>(
      store.get_in_block("UserActivityHistory", id.toHexString())
    );
  }

  static load(id: Bytes): UserActivityHistory | null {
    return changetype<UserActivityHistory | null>(
      store.get("UserActivityHistory", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get activityType(): string {
    let value = this.get("activityType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set activityType(value: string) {
    this.set("activityType", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get offeringAddress(): Bytes | null {
    let value = this.get("offeringAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set offeringAddress(value: Bytes | null) {
    if (!value) {
      this.unset("offeringAddress");
    } else {
      this.set("offeringAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get wrappedTokenAddress(): Bytes | null {
    let value = this.get("wrappedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set wrappedTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("wrappedTokenAddress");
    } else {
      this.set("wrappedTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UserInvestmentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserInvestment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserInvestment[]>(value);
  }
}

export class UserOfferingInvestmentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserOfferingInvestment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserOfferingInvestment[]>(value);
  }
}

export class UserClaimLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserClaim[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserClaim[]>(value);
  }
}

export class UserPayoutLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserPayout[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserPayout[]>(value);
  }
}

export class UserWrappedTokenHoldingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserWrappedTokenHolding[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserWrappedTokenHolding[]>(value);
  }
}

export class OfferingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Offering[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Offering[]>(value);
  }
}

export class UserEmergencyUnlockLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserEmergencyUnlock[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserEmergencyUnlock[]>(value);
  }
}

export class UserRefundLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserRefund[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserRefund[]>(value);
  }
}

export class UserKYBValidationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserKYBValidation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserKYBValidation[]>(value);
  }
}

export class UserNotificationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserNotification[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserNotification[]>(value);
  }
}

export class UserActivityHistoryLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserActivityHistory[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserActivityHistory[]>(value);
  }
}
