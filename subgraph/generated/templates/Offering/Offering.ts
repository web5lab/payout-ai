// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Invested extends ethereum.Event {
  get params(): Invested__Params {
    return new Invested__Params(this);
  }
}

export class Invested__Params {
  _event: Invested;

  constructor(event: Invested) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paidAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensReceived(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SaleClosed extends ethereum.Event {
  get params(): SaleClosed__Params {
    return new SaleClosed__Params(this);
  }
}

export class SaleClosed__Params {
  _event: SaleClosed;

  constructor(event: SaleClosed) {
    this._event = event;
  }

  get totalRaised(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferingFinalized extends ethereum.Event {
  get params(): OfferingFinalized__Params {
    return new OfferingFinalized__Params(this);
  }
}

export class OfferingFinalized__Params {
  _event: OfferingFinalized;

  constructor(event: OfferingFinalized) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferingCancelled extends ethereum.Event {
  get params(): OfferingCancelled__Params {
    return new OfferingCancelled__Params(this);
  }
}

export class OfferingCancelled__Params {
  _event: OfferingCancelled;

  constructor(event: OfferingCancelled) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SoftCapReached extends ethereum.Event {
  get params(): SoftCapReached__Params {
    return new SoftCapReached__Params(this);
  }
}

export class SoftCapReached__Params {
  _event: SoftCapReached;

  constructor(event: SoftCapReached) {
    this._event = event;
  }

  get totalRaised(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get softCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentTokenWhitelisted extends ethereum.Event {
  get params(): PaymentTokenWhitelisted__Params {
    return new PaymentTokenWhitelisted__Params(this);
  }
}

export class PaymentTokenWhitelisted__Params {
  _event: PaymentTokenWhitelisted;

  constructor(event: PaymentTokenWhitelisted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OracleSet extends ethereum.Event {
  get params(): OracleSet__Params {
    return new OracleSet__Params(this);
  }
}

export class OracleSet__Params {
  _event: OracleSet;

  constructor(event: OracleSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Offering extends ethereum.SmartContract {
  static bind(address: Address): Offering {
    return new Offering("Offering", address);
  }

  saleToken(): Address {
    let result = super.call("saleToken", "saleToken():(address)", []);

    return result[0].toAddress();
  }

  try_saleToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("saleToken", "saleToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minInvestment(): BigInt {
    let result = super.call("minInvestment", "minInvestment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minInvestment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minInvestment",
      "minInvestment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxInvestment(): BigInt {
    let result = super.call("maxInvestment", "maxInvestment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxInvestment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxInvestment",
      "maxInvestment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startDate(): BigInt {
    let result = super.call("startDate", "startDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startDate", "startDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endDate(): BigInt {
    let result = super.call("endDate", "endDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endDate", "endDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  softCap(): BigInt {
    let result = super.call("softCap", "softCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_softCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("softCap", "softCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundraisingCap(): BigInt {
    let result = super.call("fundraisingCap", "fundraisingCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundraisingCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundraisingCap",
      "fundraisingCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRaised(): BigInt {
    let result = super.call("totalRaised", "totalRaised():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRaised(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRaised", "totalRaised():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  apyEnabled(): boolean {
    let result = super.call("apyEnabled", "apyEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_apyEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("apyEnabled", "apyEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wrappedTokenAddress(): Address {
    let result = super.call(
      "wrappedTokenAddress",
      "wrappedTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wrappedTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wrappedTokenAddress",
      "wrappedTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payoutTokenAddress(): Address {
    let result = super.call(
      "payoutTokenAddress",
      "payoutTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_payoutTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "payoutTokenAddress",
      "payoutTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payoutRate(): BigInt {
    let result = super.call("payoutRate", "payoutRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_payoutRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("payoutRate", "payoutRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingTokens(param0: Address): BigInt {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingTokens(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistedPaymentTokens(param0: Address): boolean {
    let result = super.call(
      "whitelistedPaymentTokens",
      "whitelistedPaymentTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedPaymentTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedPaymentTokens",
      "whitelistedPaymentTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenOracles(param0: Address): Address {
    let result = super.call("tokenOracles", "tokenOracles(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenOracles(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenOracles",
      "tokenOracles(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
