// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InvestmentRegistered extends ethereum.Event {
  get params(): InvestmentRegistered__Params {
    return new InvestmentRegistered__Params(this);
  }
}

export class InvestmentRegistered__Params {
  _event: InvestmentRegistered;

  constructor(event: InvestmentRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdtValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PayoutDistributed extends ethereum.Event {
  get params(): PayoutDistributed__Params {
    return new PayoutDistributed__Params(this);
  }
}

export class PayoutDistributed__Params {
  _event: PayoutDistributed;

  constructor(event: PayoutDistributed) {
    this._event = event;
  }

  get period(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalUSDTAtDistribution(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PayoutClaimed extends ethereum.Event {
  get params(): PayoutClaimed__Params {
    return new PayoutClaimed__Params(this);
  }
}

export class PayoutClaimed__Params {
  _event: PayoutClaimed;

  constructor(event: PayoutClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FinalTokensClaimed extends ethereum.Event {
  get params(): FinalTokensClaimed__Params {
    return new FinalTokensClaimed__Params(this);
  }
}

export class FinalTokensClaimed__Params {
  _event: FinalTokensClaimed;

  constructor(event: FinalTokensClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EmergencyUnlockEnabled extends ethereum.Event {
  get params(): EmergencyUnlockEnabled__Params {
    return new EmergencyUnlockEnabled__Params(this);
  }
}

export class EmergencyUnlockEnabled__Params {
  _event: EmergencyUnlockEnabled;

  constructor(event: EmergencyUnlockEnabled) {
    this._event = event;
  }

  get penalty(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EmergencyUnlockDisabled extends ethereum.Event {
  get params(): EmergencyUnlockDisabled__Params {
    return new EmergencyUnlockDisabled__Params(this);
  }
}

export class EmergencyUnlockDisabled__Params {
  _event: EmergencyUnlockDisabled;

  constructor(event: EmergencyUnlockDisabled) {
    this._event = event;
  }
}

export class EmergencyUnlockUsed extends ethereum.Event {
  get params(): EmergencyUnlockUsed__Params {
    return new EmergencyUnlockUsed__Params(this);
  }
}

export class EmergencyUnlockUsed__Params {
  _event: EmergencyUnlockUsed;

  constructor(event: EmergencyUnlockUsed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FirstPayoutDateSet extends ethereum.Event {
  get params(): FirstPayoutDateSet__Params {
    return new FirstPayoutDateSet__Params(this);
  }
}

export class FirstPayoutDateSet__Params {
  _event: FirstPayoutDateSet;

  constructor(event: FirstPayoutDateSet) {
    this._event = event;
  }

  get firstPayoutDate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WRAPEDTOKEN__getUserPayoutInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Array<BigInt>;
  value5: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Array<BigInt>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }

  getTotalClaimable(): BigInt {
    return this.value0;
  }

  getTotalClaimed(): BigInt {
    return this.value1;
  }

  getLastClaimedPeriod(): BigInt {
    return this.value2;
  }

  getUserUSDTValue(): BigInt {
    return this.value3;
  }

  getClaimablePeriods(): Array<BigInt> {
    return this.value4;
  }

  getClaimableAmounts(): Array<BigInt> {
    return this.value5;
  }
}

export class WRAPEDTOKEN__investorsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getDeposited(): BigInt {
    return this.value0;
  }

  getUsdtValue(): BigInt {
    return this.value1;
  }

  getHasClaimedFinalTokens(): boolean {
    return this.value2;
  }

  getEmergencyUnlocked(): boolean {
    return this.value3;
  }

  getTotalPayoutsClaimed(): BigInt {
    return this.value4;
  }
}

export class WRAPEDTOKEN extends ethereum.SmartContract {
  static bind(address: Address): WRAPEDTOKEN {
    return new WRAPEDTOKEN("WRAPEDTOKEN", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  peggedToken(): Address {
    let result = super.call("peggedToken", "peggedToken():(address)", []);

    return result[0].toAddress();
  }

  try_peggedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("peggedToken", "peggedToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payoutToken(): Address {
    let result = super.call("payoutToken", "payoutToken():(address)", []);

    return result[0].toAddress();
  }

  try_payoutToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("payoutToken", "payoutToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maturityDate(): BigInt {
    let result = super.call("maturityDate", "maturityDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maturityDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maturityDate", "maturityDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutAPR(): BigInt {
    let result = super.call("payoutAPR", "payoutAPR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_payoutAPR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("payoutAPR", "payoutAPR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutPeriodDuration(): BigInt {
    let result = super.call(
      "payoutPeriodDuration",
      "payoutPeriodDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_payoutPeriodDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payoutPeriodDuration",
      "payoutPeriodDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstPayoutDate(): BigInt {
    let result = super.call(
      "firstPayoutDate",
      "firstPayoutDate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstPayoutDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstPayoutDate",
      "firstPayoutDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPayoutPeriod(): BigInt {
    let result = super.call(
      "currentPayoutPeriod",
      "currentPayoutPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentPayoutPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPayoutPeriod",
      "currentPayoutPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEscrowed(): BigInt {
    let result = super.call("totalEscrowed", "totalEscrowed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalEscrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEscrowed",
      "totalEscrowed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUSDTInvested(): BigInt {
    let result = super.call(
      "totalUSDTInvested",
      "totalUSDTInvested():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUSDTInvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUSDTInvested",
      "totalUSDTInvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyUnlockEnabled(): boolean {
    let result = super.call(
      "emergencyUnlockEnabled",
      "emergencyUnlockEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_emergencyUnlockEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyUnlockEnabled",
      "emergencyUnlockEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergencyUnlockPenalty(): BigInt {
    let result = super.call(
      "emergencyUnlockPenalty",
      "emergencyUnlockPenalty():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_emergencyUnlockPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencyUnlockPenalty",
      "emergencyUnlockPenalty():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPayoutInfo(_user: Address): WRAPEDTOKEN__getUserPayoutInfoResult {
    let result = super.call(
      "getUserPayoutInfo",
      "getUserPayoutInfo(address):(uint256,uint256,uint256,uint256,uint256[],uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return new WRAPEDTOKEN__getUserPayoutInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray()
    );
  }

  try_getUserPayoutInfo(
    _user: Address
  ): ethereum.CallResult<WRAPEDTOKEN__getUserPayoutInfoResult> {
    let result = super.tryCall(
      "getUserPayoutInfo",
      "getUserPayoutInfo(address):(uint256,uint256,uint256,uint256,uint256[],uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WRAPEDTOKEN__getUserPayoutInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray()
      )
    );
  }

  investors(param0: Address): WRAPEDTOKEN__investorsResult {
    let result = super.call(
      "investors",
      "investors(address):(uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new WRAPEDTOKEN__investorsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_investors(
    param0: Address
  ): ethereum.CallResult<WRAPEDTOKEN__investorsResult> {
    let result = super.tryCall(
      "investors",
      "investors(address):(uint256,uint256,bool,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new WRAPEDTOKEN__investorsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get config(): ConstructorCallConfigStruct {
    return changetype<ConstructorCallConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get peggedToken(): Address {
    return this[2].toAddress();
  }

  get payoutToken(): Address {
    return this[3].toAddress();
  }

  get maturityDate(): BigInt {
    return this[4].toBigInt();
  }

  get payoutAPR(): BigInt {
    return this[5].toBigInt();
  }

  get offeringContract(): Address {
    return this[6].toAddress();
  }

  get admin(): Address {
    return this[7].toAddress();
  }

  get payoutPeriodDuration(): BigInt {
    return this[8].toBigInt();
  }
}

export class RegisterInvestmentCall extends ethereum.Call {
  get inputs(): RegisterInvestmentCall__Inputs {
    return new RegisterInvestmentCall__Inputs(this);
  }

  get outputs(): RegisterInvestmentCall__Outputs {
    return new RegisterInvestmentCall__Outputs(this);
  }
}

export class RegisterInvestmentCall__Inputs {
  _call: RegisterInvestmentCall;

  constructor(call: RegisterInvestmentCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get usdValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterInvestmentCall__Outputs {
  _call: RegisterInvestmentCall;

  constructor(call: RegisterInvestmentCall) {
    this._call = call;
  }
}

export class DistributePayoutForPeriodCall extends ethereum.Call {
  get inputs(): DistributePayoutForPeriodCall__Inputs {
    return new DistributePayoutForPeriodCall__Inputs(this);
  }

  get outputs(): DistributePayoutForPeriodCall__Outputs {
    return new DistributePayoutForPeriodCall__Outputs(this);
  }
}

export class DistributePayoutForPeriodCall__Inputs {
  _call: DistributePayoutForPeriodCall;

  constructor(call: DistributePayoutForPeriodCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DistributePayoutForPeriodCall__Outputs {
  _call: DistributePayoutForPeriodCall;

  constructor(call: DistributePayoutForPeriodCall) {
    this._call = call;
  }
}

export class ClaimAvailablePayoutsCall extends ethereum.Call {
  get inputs(): ClaimAvailablePayoutsCall__Inputs {
    return new ClaimAvailablePayoutsCall__Inputs(this);
  }

  get outputs(): ClaimAvailablePayoutsCall__Outputs {
    return new ClaimAvailablePayoutsCall__Outputs(this);
  }
}

export class ClaimAvailablePayoutsCall__Inputs {
  _call: ClaimAvailablePayoutsCall;

  constructor(call: ClaimAvailablePayoutsCall) {
    this._call = call;
  }
}

export class ClaimAvailablePayoutsCall__Outputs {
  _call: ClaimAvailablePayoutsCall;

  constructor(call: ClaimAvailablePayoutsCall) {
    this._call = call;
  }
}

export class ClaimFinalTokensCall extends ethereum.Call {
  get inputs(): ClaimFinalTokensCall__Inputs {
    return new ClaimFinalTokensCall__Inputs(this);
  }

  get outputs(): ClaimFinalTokensCall__Outputs {
    return new ClaimFinalTokensCall__Outputs(this);
  }
}

export class ClaimFinalTokensCall__Inputs {
  _call: ClaimFinalTokensCall;

  constructor(call: ClaimFinalTokensCall) {
    this._call = call;
  }
}

export class ClaimFinalTokensCall__Outputs {
  _call: ClaimFinalTokensCall;

  constructor(call: ClaimFinalTokensCall) {
    this._call = call;
  }
}

export class EnableEmergencyUnlockCall extends ethereum.Call {
  get inputs(): EnableEmergencyUnlockCall__Inputs {
    return new EnableEmergencyUnlockCall__Inputs(this);
  }

  get outputs(): EnableEmergencyUnlockCall__Outputs {
    return new EnableEmergencyUnlockCall__Outputs(this);
  }
}

export class EnableEmergencyUnlockCall__Inputs {
  _call: EnableEmergencyUnlockCall;

  constructor(call: EnableEmergencyUnlockCall) {
    this._call = call;
  }

  get _penaltyPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnableEmergencyUnlockCall__Outputs {
  _call: EnableEmergencyUnlockCall;

  constructor(call: EnableEmergencyUnlockCall) {
    this._call = call;
  }
}

export class DisableEmergencyUnlockCall extends ethereum.Call {
  get inputs(): DisableEmergencyUnlockCall__Inputs {
    return new DisableEmergencyUnlockCall__Inputs(this);
  }

  get outputs(): DisableEmergencyUnlockCall__Outputs {
    return new DisableEmergencyUnlockCall__Outputs(this);
  }
}

export class DisableEmergencyUnlockCall__Inputs {
  _call: DisableEmergencyUnlockCall;

  constructor(call: DisableEmergencyUnlockCall) {
    this._call = call;
  }
}

export class DisableEmergencyUnlockCall__Outputs {
  _call: DisableEmergencyUnlockCall;

  constructor(call: DisableEmergencyUnlockCall) {
    this._call = call;
  }
}

export class EmergencyUnlockCall extends ethereum.Call {
  get inputs(): EmergencyUnlockCall__Inputs {
    return new EmergencyUnlockCall__Inputs(this);
  }

  get outputs(): EmergencyUnlockCall__Outputs {
    return new EmergencyUnlockCall__Outputs(this);
  }
}

export class EmergencyUnlockCall__Inputs {
  _call: EmergencyUnlockCall;

  constructor(call: EmergencyUnlockCall) {
    this._call = call;
  }
}

export class EmergencyUnlockCall__Outputs {
  _call: EmergencyUnlockCall;

  constructor(call: EmergencyUnlockCall) {
    this._call = call;
  }
}

export class SetFirstPayoutDateCall extends ethereum.Call {
  get inputs(): SetFirstPayoutDateCall__Inputs {
    return new SetFirstPayoutDateCall__Inputs(this);
  }

  get outputs(): SetFirstPayoutDateCall__Outputs {
    return new SetFirstPayoutDateCall__Outputs(this);
  }
}

export class SetFirstPayoutDateCall__Inputs {
  _call: SetFirstPayoutDateCall;

  constructor(call: SetFirstPayoutDateCall) {
    this._call = call;
  }
}

export class SetFirstPayoutDateCall__Outputs {
  _call: SetFirstPayoutDateCall;

  constructor(call: SetFirstPayoutDateCall) {
    this._call = call;
  }
}
